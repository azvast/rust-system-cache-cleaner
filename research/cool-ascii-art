
Today Were going to start talking about strings with ownership. 
In the next video well go over other date types.
https://play.rust-lang.org/


string literals vs String
----------------+-----------
immutable       | mutable
stored on stack | stored on the heap
hard coded      | dynamic 

String are used when we don't know the size, like when getting user input.

-------------------------------------------------------------------------
{
let mut s = String::from("hello"); // usable here

s.push_str(", world!"); // push_str() appends a literal to a String

println!("{}", s); // This will print `hello, world!`
}
// s value autmaticly returns the memory
-------------------------------------------------------------------------

1. to get memory from os 
2. we need a way to get the memory from the os

After the closing, } rust automatically calls the drop fn to return memory.
This is similar to c++ Resource Acquisition initialization (RALL).

let x = 5;
let y = x;
println!("x: {} y: {}", x, y);

we bind the value 5 to y by cloning x, then both equal 5.

---------------------------------------------------------------------------
However this is not the case here.

let s1 = String::from("hello");
let s2 = s1;

  s1 (stack)                (heap)
+--------+---+          +------------+
|Name    |val|          | Index | val|
|--------+---|          |-------+----|
| ptr    | --|--------> | 0     | h  |
|--------+---|          |-------+----|
|len     | 5 |          | 1     | e  |
|--------+---|          |-------+----|
|capacity| 5 |          | 2     | l  |
+------------+          |-------+----|
                        | 3     | l  |
                        |-------+----|
                        | 4     | o  |
                        +-------+----+


What happans when we set s2 = s1 this is that they both point to the same data.

let s1 = String::from("hello");
let s2 = s1;

  s1 (stack)                 (heap)
+--------+---+           +------------+
|Name    |val|           | Index | val|
|--------+---|           |-------+----|
| ptr    | --|----+----> | 0     | h  |
|--------+---|    |      |-------+----|
|len     | 5 |    |      | 1     | e  |
|--------+---|    |      |-------+----|
|capacity| 5 |    |      | 2     | l  |
+------------+    |      |-------+----|
                  |      | 3     | l  |
                  |      |-------+----|
                  |      | 4     | o  |
                  |      +-------+----+
  s2 (stack)      |
+--------+---+    |
|Name    |val|    |
|--------+---|    |
| ptr    | --|----+
|--------+---| 
|len     | 5 |  
|--------+---| 
|capacity| 5 | 
+------------+ 

---------------------------------------------
let s1 = String::from("hello");
let s2 = s1.clone();

  s1 (stack)                (heap)
+--------+---+          +------------+
|Name    |val|          | Index | val|
|--------+---|          |-------+----|
| ptr    | --|--------> | 0     | h  |
|--------+---|          |-------+----|
|len     | 5 |          | 1     | e  |
|--------+---|          |-------+----|
|capacity| 5 |          | 2     | l  |
+------------+          |-------+----|
                        | 3     | l  |
                        |-------+----|
                        | 4     | o  |
                        +-------+----+


  s2 (stack)                (heap)
+--------+---+          +------------+
|Name    |val|          | Index | val|
|--------+---|          |-------+----|
| ptr    | --|--------> | 0     | h  |
|--------+---|          |-------+----|
|len     | 5 |          | 1     | e  |
|--------+---|          |-------+----|
|capacity| 5 |          | 2     | l  |
+------------+          |-------+----|
                        | 3     | l  |
                        |-------+----|
                        | 4     | o  |
                        +-------+----+
--------------------------------------

let s1 = String::from("hello");
let s2 = s1;

println!("{}, world!", s1);

Remeber this code from eairler. Rust will make s1 invaid
when we use it after s2 = s1 so the print statment with s1 will
not compile

Not ussable any more
  s1 (stack)                 (heap)
+--------+---+           +------------+
|--------|---|           | Index | val|
|--------+---|           |-------+----|
|--------|---|----+----> | 0     | h  |
|--------+---|    |      |-------+----|
|--------|---|    |      | 1     | e  |
|--------+---|    |      |-------+----|
|--------|---|    |      | 2     | l  |
+------------+    |      |-------+----|
                  |      | 3     | l  |
                  |      |-------+----|
                  |      | 4     | o  |
                  |      +-------+----+
  s2 (stack)      |
+--------+---+    |
|Name    |val|    |
|--------+---|    |
| ptr    | --|----+
|--------+---| 
|len     | 5 |  
|--------+---| 
|capacity| 5 | 
+------------+ 




In chapter 8 well go over string more in-depth.